name: Deploy Spring Boot to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clone source code t·ª´ GitHub
      - name: 1Ô∏è‚É£ Checkout repository
        uses: actions/checkout@v3

      # 1Ô∏è‚É£.5 Thi·∫øt l·∫≠p JDK 21
      - name: 1Ô∏è‚É£.5 Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Ho·∫∑c 'zulu', 'adopt'
          java-version: '21'

      # 2Ô∏è‚É£ Build Spring Boot Application
      - name: 2Ô∏è‚É£ Build Spring Boot Application
        run: |
          chmod +x mvnw  # N·∫øu d√πng Maven Wrapper
          ./mvnw clean package -DskipTests  # Build ·ª©ng d·ª•ng

      # 3Ô∏è‚É£ Verify JAR file exists
      - name: 3Ô∏è‚É£ Verify JAR file exists
        run: |
          if [ ! -f target/myapp.jar ]; then
            echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y target/myapp.jar"
            exit 1
          fi

      # 4Ô∏è‚É£ Build Docker Image
      - name: 4Ô∏è‚É£ Build Docker Image
        run: |
          docker build -t myapp:latest .
          docker save myapp:latest -o myapp.tar

      # 5Ô∏è‚É£ Copy Docker Image l√™n VPS
      - name: 5Ô∏è‚É£ Copy image to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "myapp.tar"
          target: "/home/user/app/"

      # 6Ô∏è‚É£ Deploy tr√™n VPS m√† kh√¥ng b·ªã tr√πng port
      - name: 6Ô∏è‚É£ Load Docker Image & Restart Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            sudo systemctl start docker || sudo service docker start
            cd /home/user/app
            docker load -i myapp.tar
            docker stop spring_boot || true
            docker rm spring_boot || true
            docker run -d --name spring_boot -p 8080:8080 --restart always myapp:latest

      # 7Ô∏è‚É£ G·ª≠i th√¥ng b√°o l√™n Discord khi deploy th√†nh c√¥ng
      - name: 7Ô∏è‚É£ Notify Discord for success
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -n "$WEBHOOK" ]; then
            curl -X POST -H "Content-Type: application/json" \
            -d '{"content": "üöÄ Deploy Spring Boot th√†nh c√¥ng l√™n VPS!"}' \
            "$WEBHOOK"
          fi

#  failure:
#    runs-on: ubuntu-latest
#    steps:
#      - name: 8Ô∏è‚É£ Notify Discord for failure
#        env:
#          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
#        run: |
#          if [ -n "$WEBHOOK" ]; then
#            curl -X POST -H "Content-Type: application/json" \
#            -d '{"content": "‚ö†Ô∏è Deploy Spring Boot th·∫•t b·∫°i!"}' \
#            "$WEBHOOK"
#          fi
